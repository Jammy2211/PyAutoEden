{
    "from VIS_CTI_Autofit import conf": "from VIS_CTI_Autoconf import conf",
    "from VIS_CTI_Autoarray import conf": "from VIS_CTI_Autoconf import conf",
    "from VIS_CTI_Autocti import conf": "from VIS_CTI_Autoconf import conf",
    "from VIS_CTI_Autofit import VIS_CTI_Mock as m": "from VIS_CTI_Autofit import mock as m",
    "from VIS_CTI_Autofit.VIS_CTI_Mock import *": "from VIS_CTI_Autofit.mock import *",
    "from VIS_CTI_Autoarray.VIS_CTI_Mock import *" : "from VIS_CTI_Autoarray.mock import *",
    "from VIS_CTI_Autoarray import VIS_CTI_Mock as m": "from VIS_CTI_Autoarray import mock as m",
    "from VIS_CTI_Autoarray import VIS_CTI_Util": "from VIS_CTI_Autoarray import VIS_CTI_Util as util",
    "from VIS_CTI_Autocti import VIS_CTI_Util" : "from VIS_CTI_Autocti import VIS_CTI_Util as util",
    "from VIS_CTI_Autocti import VIS_CTI_Mock as m" : "from VIS_CTI_Autocti import mock as m",
    "from VIS_CTI_Autofit import VIS_CTI_Mock" : "from VIS_CTI_Autofit import mock",
    "arcticpy": "SHE_ArCTICPy",
    "from sqlalchemy.orm import Session": "",
    "from sqlalchemy.orm.exc import NoResultFound": "",
    ": Optional[Session]": "",
    ": Session": "",
    "dill": "pickle",
    "from pickle import register": "",
    "from VIS_CTI_Autofit import Gaussian, Model,": "from VIS_CTI_Autofit import Gaussian, Model,",
    "return Model(Gaussian)": "return Model(Gaussian)",
    " -> Fit": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Grid.VIS_CTI_GridSearch.result_builder import ResultBuilder": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Mcmc.auto_correlations import AutoCorrelationsSettings" : "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Grid.VIS_CTI_GridSearch.result_builder import ResultBuilder": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Nest.VIS_CTI_Ultranest.plotter import UltraNestPlotter": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Mcmc.VIS_CTI_Zeus.plotter import ZeusPlotter": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Optimize.VIS_CTI_Pyswarms.plotter import PySwarmsPlotter": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Mcmc.VIS_CTI_Emcee.plotter import EmceePlotter": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Mcmc.VIS_CTI_Emcee.search import Emcee": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Mcmc.VIS_CTI_Zeus.search import Zeus": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Nest.VIS_CTI_Ultranest.search import UltraNest": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Optimize.VIS_CTI_Pyswarms.VIS_CTI_Search.globe import PySwarmsGlobal": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Optimize.VIS_CTI_Pyswarms.VIS_CTI_Search.local import PySwarmsLocal": "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Optimize.VIS_CTI_Lbfgs.search import LBFGS" : "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Search.VIS_CTI_Optimize.VIS_CTI_Drawer.search import Drawer" : "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Samples.mcmc import SamplesMCMC" : "",
    "from VIS_CTI_Autofit.VIS_CTI_NonLinear.VIS_CTI_Samples import SamplesMCMC" : "",
    "labels=self.model.parameter_labels_with_superscripts_latex": "labels=self.model.parameter_labels_with_superscripts",
    "original_create_file_handle = pickle._pickle._create_filehandle": "",
    "pickle._pickle._create_filehandle = _create_file_handle": "",
    "@register(abc.ABCMeta)": "",
    "def save_abc(pickler, obj):": "",
    "pickle._Pickler.save_type(pickler, obj)": "",
    "dir(messages)": "",
    "if not any(((suffix in suffixes) for suffix in CONFIG_SUFFIXES)):" : "",
    "parallel_trap_list=None,": "parallel_trap_list: Optional[List[TrapInstantCapture]] = None,",
    "parallel_ccd=None,":"parallel_ccd: Optional[CCDPhase] = None,",
    "serial_trap_list=None,":"serial_trap_list: Optional[List[TrapInstantCapture]] = None,",
    "serial_ccd=None":"serial_ccd: Optional[CCDPhase] = None",
    "trap_list=None,": "trap_list: Optional[List[TrapInstantCapture]] = None,",
    "ccd=None,":"ccd: Optional[CCDPhase] = None,"
}